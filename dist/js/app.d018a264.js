(function(e){function a(a){for(var s,n,l=a[0],r=a[1],o=a[2],b=0,u=[];b<l.length;b++)n=l[b],Object.prototype.hasOwnProperty.call(i,n)&&i[n]&&u.push(i[n][0]),i[n]=0;for(s in r)Object.prototype.hasOwnProperty.call(r,s)&&(e[s]=r[s]);d&&d(a);while(u.length)u.shift()();return c.push.apply(c,o||[]),t()}function t(){for(var e,a=0;a<c.length;a++){for(var t=c[a],s=!0,l=1;l<t.length;l++){var r=t[l];0!==i[r]&&(s=!1)}s&&(c.splice(a--,1),e=n(n.s=t[0]))}return e}var s={},i={app:0},c=[];function n(a){if(s[a])return s[a].exports;var t=s[a]={i:a,l:!1,exports:{}};return e[a].call(t.exports,t,t.exports,n),t.l=!0,t.exports}n.m=e,n.c=s,n.d=function(e,a,t){n.o(e,a)||Object.defineProperty(e,a,{enumerable:!0,get:t})},n.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,a){if(1&a&&(e=n(e)),8&a)return e;if(4&a&&"object"===typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&a&&"string"!=typeof e)for(var s in e)n.d(t,s,function(a){return e[a]}.bind(null,s));return t},n.n=function(e){var a=e&&e.__esModule?function(){return e["default"]}:function(){return e};return n.d(a,"a",a),a},n.o=function(e,a){return Object.prototype.hasOwnProperty.call(e,a)},n.p="/";var l=window["webpackJsonp"]=window["webpackJsonp"]||[],r=l.push.bind(l);l.push=a,l=l.slice();for(var o=0;o<l.length;o++)a(l[o]);var d=r;c.push([0,"chunk-vendors"]),t()})({0:function(e,a,t){e.exports=t("56d7")},"441a":function(e,a,t){},"56d7":function(e,a,t){"use strict";t.r(a);t("e260"),t("e6cf"),t("cca6"),t("a79d");var s=t("7a23");function i(e,a,t,i,c,n){var l=Object(s["v"])("the-navbar"),r=Object(s["v"])("router-view");return Object(s["p"])(),Object(s["d"])(s["a"],null,[Object(s["g"])(l),Object(s["g"])(r)],64)}var c={class:"navbar"},n=Object(s["e"])("h3",null,"NoSQL",-1),l={class:"navbar-menu"},r=Object(s["e"])("a",null,"Главная",-1),o=Object(s["e"])("a",null,"История",-1),d=Object(s["e"])("a",null,"Применение",-1),b=Object(s["e"])("a",null,"Типы",-1),u=Object(s["e"])("a",null,"Сравнение с SQL",-1);function p(e,a){var t=Object(s["v"])("router-link");return Object(s["p"])(),Object(s["d"])("header",c,[n,Object(s["e"])("ul",l,[Object(s["e"])("li",null,[Object(s["g"])(t,{to:"/index"},{default:Object(s["z"])((function(){return[r]})),_:1})]),Object(s["e"])("li",null,[Object(s["g"])(t,{to:"/history"},{default:Object(s["z"])((function(){return[o]})),_:1})]),Object(s["e"])("li",null,[Object(s["g"])(t,{to:"/usage"},{default:Object(s["z"])((function(){return[d]})),_:1})]),Object(s["e"])("li",null,[Object(s["g"])(t,{to:"/types"},{default:Object(s["z"])((function(){return[b]})),_:1})]),Object(s["e"])("li",null,[Object(s["g"])(t,{to:"/compare"},{default:Object(s["z"])((function(){return[u]})),_:1})])])])}const v={};v.render=p;var m=v,f={name:"TheIndexApp",components:{TheNavbar:m}};f.render=i;var h=f,g=t("6c02"),O={class:"container with-nav"},j=Object(s["e"])("div",{class:"card"},[Object(s["e"])("h3",null,"NoSQL Database"),Object(s["e"])("hr"),Object(s["e"])("p",null,"NoSQL (от англ. not only SQL — не только SQL) — обозначение широкого класса разнородных систем управления базами данных, появившихся в конце 2000-х — начале 2010-х годов и существенно отличающихся от традиционных реляционных СУБД с доступом к данным средствами языка SQL. Применяется к системам, в которых делается попытка решить проблемы масштабируемости и доступности за счёт полного или частичного отказа от требований атомарности и согласованности данных."),Object(s["e"])("div",{class:"format-image"},[Object(s["e"])("img",{class:"responsive index-img",src:"https://devcom.com/wp-content/uploads/2020/06/nosql.png"})])],-1),y=[j];function w(e,a,t,i,c,n){return Object(s["p"])(),Object(s["d"])("div",O,y)}var S={name:"TheIndexApp"};S.render=w;var x=S,_={class:"container with-nav"},N=Object(s["e"])("div",{class:"card"},[Object(s["e"])("h3",null,"История создания"),Object(s["e"])("hr"),Object(s["e"])("p",null," Сама по себе идея нереляционных баз данных не нова, а использование нереляционных хранилищ началось ещё во времена первых компьютеров. Нереляционные базы данных процветали во времена мэйнфреймов, а позднее, во времена доминирования реляционных СУБД, нашли применение в специализированных хранилищах, например, иерархических службах каталогов. Появление же нереляционных СУБД нового поколения произошло из-за необходимости создания параллельных распределённых систем для высокомасштабируемых интернет-приложений, таких как поисковые системы. "),Object(s["e"])("div",{class:"format-image responsive"},[Object(s["e"])("img",{class:"img-style responsive history-img",src:"https://oracle-patches.com/images/2021/03/13/NoSQL_databases_Case_study_large.png",width:"766",alt:"506"})]),Object(s["e"])("p",null," В начале 2000-х годов Google построил свою высокомасштабируемую поисковую систему и приложения: GMail, Google Maps, Google Earth и т. п., решая проблемы масштабируемости и параллельной обработки больших объёмов данных. В результате была создана распределённая файловая система и распределённая система координации, хранилище семейств колонок (англ. column family store), среда выполнения, основанная на алгоритме MapReduce. Публикация компанией Google описаний этих технологий привела к всплеску интереса среди разработчиков открытого программного обеспечения, в результате чего был создан Hadoop и запущены связанные с ним проекты, призванные создать подобные Google технологии. Через год, в 2007 году, примеру Google последовал Amazon.com, опубликовав статьи о высокодоступной базе данных Amazon DynamoDB. Поддержка гигантов индустрии менее чем за пять лет привела к широкому распространению технологий NoSQL (и подобных) для управления «большими данными», а к делу присоединились другие большие и маленькие компании, такие как: IBM, Facebook, Netflix, eBay, Hulu, Yahoo!, со своими проприетарными и открытыми решениями.")],-1),L=[N];function Q(e,a,t,i,c,n){return Object(s["p"])(),Object(s["d"])("div",_,L)}var k={name:"TheHistory"};k.render=Q;var I=k,B={class:"container with-nav"},C=Object(s["e"])("div",{class:"card"},[Object(s["e"])("h3",null,"Сравнение с реляционными базами данных")],-1),M=Object(s["e"])("div",{class:"card center vid-cont"},[Object(s["e"])("iframe",{class:"responsive-frame",src:"https://www.youtube.com/embed/0X43QfCfyk0",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}),Object(s["e"])("h4",null,"*в качестве NoSQL базы данных продемонстрирована MongoDB")],-1),T=[C,M];function z(e,a,t,i,c,n){return Object(s["p"])(),Object(s["d"])("div",B,T)}var P={name:"Comparing"};P.render=z;var G=P,A={class:"container with-nav"},H=Object(s["f"])('<div class="card-flex"><div class="item2"><h3>Использование NoSQL</h3><hr><p>NoSQL хранилища данных отвечают за те ключевые требования хранения данных, которые не могут быть удовлетворены реляционными БД.</p></div><div class="item2-img"><img class="responsive usage-img" src="https://www.cloudsavvyit.com/p/uploads/2021/07/f5932bc2.jpg?width=1198&amp;trim=1,1&amp;bg-color=000&amp;pad=1,1" width="400" height="225" alt="mongo"></div></div><div class="card-flex"><div class="item2"><h3>Кеширование</h3><hr><p> Кеширование результатов является общей задачей повышения отзывчивости приложения. К примеру, web-сайт отдает одни и те же ответы сотням и тысячам пользователей. Вместо того, чтобы утомительно пересчитывать в реляционной БД одно и то же, стоит вручную настроить кеширование. Некоторые NoSQL хранилища предоставляют похожие решения, но разработчику не нужно поддерживать пользовательский кеш. </p></div><div class="item2-img"><br><img class="responsive usage-img" src="https://marvel-b1-cdn.bc0a.com/f00000000173332/www.openlogic.com/sites/openlogic/files/image/2021-06/image-blog-openlogic-what-is-mongodb.png" alt="" width="450"></div></div><div class="card"><h3>Хранилища ключ-значение</h3><hr><p> Некоторые NoSQL БД сохраняют пары ключ-значение для быстрого поиска, к примеру, в случае доступа вопрос/ответ. Реляционные БД более ориентированы на сохранение сложных структур данных и различных взаимосвязей между типами данных. Эта технология излишне усложняет, когда разработчик хочет реализовать способ быстрого сохранения и доступа к Q&amp;A данным. </p></div>',3),D=[H];function E(e,a,t,i,c,n){return Object(s["p"])(),Object(s["d"])("div",A,D)}var J={name:"TheUsage"};J.render=E;var q=J;Object(s["s"])("data-v-abfb62aa");var R={class:"slider"},X=Object(s["f"])('<div class="container with-nav" data-v-abfb62aa><div class="card-flex" data-v-abfb62aa><div class="item2" data-v-abfb62aa><h3 data-v-abfb62aa>Key-value stores / Хранилища типа «ключ-значение»</h3><p data-v-abfb62aa>Отсутствие схемы в базах данных «ключ-значение», например, Riak, — это как раз то, что вам нужно для хранения данных. Ключ может быть синтетическим или автосгенерированным, а значение может быть представлено строкой, JSON, блобом (BLOB, Binary Large Object, большой двоичный объект) и т.д. </p></div><div class="item2-img" data-v-abfb62aa><img class="responsive usage-img" src="https://dv-website.s3.amazonaws.com/uploads/2018/09/kvd-pic1.png" alt="" data-v-abfb62aa></div></div><div class="card-flex" data-v-abfb62aa><div class="item2" data-v-abfb62aa><h3 data-v-abfb62aa>Документоориентированная база данных</h3><p data-v-abfb62aa>Данные, представленные парами ключ-значение, сжимаются как хранилище документов схожим с хранилищем «ключ-значение» образом, с той лишь разницей, что хранимые значения (документы) имеют определённую структуру и кодировку данных. XML, JSON и BSON — некоторые из стандартных распространённых кодировок.</p></div><div class="item2-img" data-v-abfb62aa><img src="https://studref.com/htm/img/15/6644/35.png" alt="" class="responsive usage-img" data-v-abfb62aa></div></div><div class="card-flex" data-v-abfb62aa><div class="item2" data-v-abfb62aa><h3 data-v-abfb62aa>Колоночная база данных</h3><p data-v-abfb62aa>В колоночных NoSQL базах данных данные хранятся в ячейках, сгруппированных в колонки, а не в строки данных. Колонки логически группируются в колоночные семейства. Колоночные семейства могут состоять из практически неограниченного количества колонок, которые могут создаваться во время работы программы или во время определения схемы. Чтение и запись происходит с использованием колонок, а не строк.</p></div><div class="item2-img" data-v-abfb62aa><img src="https://0x1.tv/img_auth.php/3/30/Колоночные_БД_на_примере_Parquet_%28Леонид_Блохин%2C_SECON-2017%29%21.jpg" alt="" class="responsive usage-img" data-v-abfb62aa></div></div><div class="card-flex" data-v-abfb62aa><div class="item2" data-v-abfb62aa><h3 data-v-abfb62aa>Графовая база данных</h3><p data-v-abfb62aa>В графовой базе данных вы не найдёте строгого формата SQL или представления таблиц и колонок, вместо этого используется гибкое графическое представление, которое идеально подходит для решения проблем масштабируемости. Графовые структуры используются вместе с рёбрами, узлами и свойствами, что обеспечивает безиндексную смежность. При использовании графового хранилища данные могут быть легко преобразованы из одной модели в другую.</p></div><div class="item2-img" data-v-abfb62aa><img src="https://tproger.ru/s3/uploads/2018/10/graf-2.jpg" alt="" class="responsive usage-img" data-v-abfb62aa></div></div></div>',1),Y=Object(s["e"])("div",{class:"container card"},[Object(s["e"])("div",{class:"slider-dots"},[Object(s["e"])("span",{class:"slider-dots_item",onclick:"currentSlide(1)"}),Object(s["e"])("span",{class:"slider-dots_item",onclick:"currentSlide(2)"}),Object(s["e"])("span",{class:"slider-dots_item",onclick:"currentSlide(3)"}),Object(s["e"])("span",{class:"slider-dots_item",onclick:"currentSlide(4)"})])],-1);function F(e,a,t,i,c,n){return Object(s["p"])(),Object(s["d"])(s["a"],null,[Object(s["e"])("div",R,[X,Object(s["e"])("a",{class:"prev",onClick:a[0]||(a[0]=function(){return n.minusSlide&&n.minusSlide.apply(n,arguments)})},"❮"),Object(s["e"])("a",{class:"next",onClick:a[1]||(a[1]=function(){return n.plusSlide&&n.plusSlide.apply(n,arguments)})},"❯")]),Y],64)}Object(s["q"])();t("ac1f"),t("5319");var K={name:"TheTypes",data:function(){return{slideIndex:1,slides:[],dots:[]}},mounted:function(){this.slides=document.getElementsByClassName("card-flex"),this.dots=document.getElementsByClassName("slider-dots_item"),this.showSlides(this.slideIndex)},methods:{plusSlide:function(){this.showSlides(this.slideIndex+=1)},minusSlide:function(){this.showSlides(this.slideIndex-=1)},currentSlide:function(e){this.showSlides(this.slideIndex=e)},showSlides:function(e){var a;for(e>this.slides.length&&(this.slideIndex=1),e<1&&(this.slideIndex=this.slides.length),a=0;a<this.slides.length;a++)this.slides[a].style.display="none";for(a=0;a<this.dots.length;a++)this.dots[a].className=this.dots[a].className.replace(" active","");this.slides[this.slideIndex-1].style.display="flex",this.dots[this.slideIndex-1].className+=" active"}}};t("c63a");K.render=F,K.__scopeId="data-v-abfb62aa";var U=K,V=[{path:"/",name:"Home",component:x,alias:"/index"},{path:"/history",name:"History",component:I},{path:"/compare",name:"Сравнение",component:G},{path:"/usage",name:"Использование",component:q},{path:"/types",name:"Типы NoSQL",component:U}],W=Object(g["a"])({history:Object(g["b"])("/"),routes:V,linkActiveClass:"active"}),Z=W;t("441a");Object(s["c"])(h).use(Z).mount("#app")},b000:function(e,a,t){},c63a:function(e,a,t){"use strict";t("b000")}});
//# sourceMappingURL=app.d018a264.js.map